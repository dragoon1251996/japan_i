def magin(A,index):
    return [min(A[0]),max(A[0]),index]

def meet(mag1,mag2):
    if (mag1[0]-mag2[0])*(mag1[1]-mag2[0])<=0:
        return True
    if (mag1[0]-mag2[1])*(mag1[1]-mag2[1])<=0:
        return True
    if (mag1[0]-mag2[0])*(mag1[1]-mag2[1])<=0:
        return True
    return False


def Seq_Magin_Meet(SMM,mag):
    SMM_x=min(SMM)[0]
    SMM_y=max([[i[1],i[0]] for i in SMM])[0]
    return meet([SMM_x,SMM_y],mag)

# def Segment(seq):
#     temp=[]
#     i=0
#     l=len(seq)
#     print(l)
#     while i<l:
#         t=[]
#         Mag=magin(seq[i],i)
#         t.append(Mag)
#         for j in reversed(range(i+1,l)):
#             print(Mag,magin(seq[j],j))
#             if meet(Mag,magin(seq[j],j))==True:
#                 temp.append(list(range(i,j+1)))
#                 i=j
#                 break
#         i=i+1
#     return  temp



def max_magin_min(seq):
    Min=min(seq)[0]
    Max=max([[i[1],i[0]] for i in seq])[0]
    return [Min,Max]

def Segment(seq):
    list_magin=[]
    for i in range(len(seq)):
        list_magin.append(magin(seq[i],i))
    list_magin.sort()
    out=[]
    l=len(list_magin)
    temp=[list_magin[0]]
    if l==1:
        out.append(temp)
    # O=[seq[list_magin[0][2]]]
    for i in range(1,l):
        max_min=max_magin_min(temp)
        max=max_min[1]
        min=max_min[0]
        # if list_magin[i-1][0]<=list_magin[i][0]<=list_magin[i-1][1]:
        if min<=list_magin[i][0]<=max:
            temp.append(list_magin[i])
            # O.append(seq[list_magin[i][2]])
        else:
            temp=sorted(temp, key=lambda S:S[2])
            out.append(temp)
            temp=[list_magin[i]]
            # O=[seq[list_magin[i][2]]]
        if i==l-1:
            temp=sorted(temp, key=lambda S:S[2])
            out.append(temp)

    out=sorted(out,key=lambda S: S[0][2])
    print(out)
    output=[]

    for i in out:
        T=[]
        for j in i:
            T.append(seq[j[2]])
        output.append(T)


    return output







import time
t=time.time()
print(Segment(
[[[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83],[80,83,87,90,95,101,107,112,119,125,131,137,143,149,155,162,167,172,176,179,183,186,188,189,191,192],[0,112,120,128,136,144,152,161,168,176,184,192,200,208,216,224,232,240,248,256,264,272,280,288,296,312]],[[106,106,107,109,111,114,116,119,122,127,130,135,138,143,147,152,157,160,165,167,169,172,173,174,174,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175],[76,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,76,76,77,79,81,84,88,91,96,100,105,109,113,118,122,128,132,138,145,149,154,157,160,164,166,168,172,174,176,178,180,182,183,185,186,187],[1280,1480,1496,1504,1512,1520,1528,1536,1545,1552,1561,1568,1576,1584,1592,1600,1608,1616,1624,1632,1640,1656,1672,1688,1840,1848,1856,1864,1872,1880,1888,1896,1904,1912,1920,1928,1936,1945,1952,1960,1968,1976,1984,1992,2000,2008,2016,2024,2032,2040,2048,2056,2064,2072,2080,2088,2096,2104,2120,2145]],[[106,107,108,109,110,111,114,115,117,119,121,124,126,128,130,134,136,138,140,143,145,148,152,154,157,159,163,165,166,168,169,170,172],[121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122],[3856,3936,3968,3984,3992,4000,4008,4024,4032,4040,4048,4056,4064,4072,4080,4088,4096,4104,4112,4120,4129,4136,4145,4152,4160,4168,4176,4184,4192,4200,4216,4248,4344]]]

))
print(time.time()-t)


# print(Segment(
#     [[[68, 68, 69, 72, 74, 77, 79, 82, 84, 87, 90, 92, 95, 96, 98, 99, 101, 103, 108, 113, 120, 127, 135, 145, 153, 159,
#        165, 170, 175, 178, 180, 182, 185, 186, 187, 187],
#       [42, 43, 44, 46, 51, 55, 58, 63, 68, 73, 76, 81, 84, 86, 87, 87, 87, 87, 84, 81, 77, 73, 66, 61, 54, 50, 45, 42,
#        37, 33, 32, 30, 28, 27, 26, 27],
#       [0, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127, 135, 151, 191, 199, 207, 215, 223, 231, 239, 247, 255,
#        263, 271, 279, 287, 295, 303, 311, 319, 327, 335, 343, 407]],
#      [[46, 119, 146, 178, 206, 230, 246, 257, 265, 269, 270], [90, 91, 91, 91, 91, 89, 87, 85, 83, 82, 82],
#       [788, 857, 863, 871, 879, 887, 895, 903, 911, 919, 935]],
#      [[76, 78, 79, 79, 79, 79, 79, 79], [112, 140, 146, 150, 153, 155, 156, 158],
#       [1468, 1468, 1471, 1479, 1487, 1495, 1503, 1511]],
#      [[73, 114, 121, 123, 124, 125, 126, 128, 128, 129, 129], [102, 101, 101, 102, 103, 105, 106, 109, 110, 134, 167],
#       [1829, 1830, 1844, 1850, 1863, 1879, 1895, 1903, 1911, 1954, 2026]],
#      [[118, 131, 139, 142, 143, 144, 145], [141, 140, 140, 140, 140, 140, 141],
#       [2334, 2335, 2347, 2354, 2359, 2369, 2385]],
#      [[101, 113, 116, 121, 127], [154, 159, 159, 159, 159], [2617, 2617, 2630, 2638, 2640]],
#      [[209, 207, 207, 207, 207, 207, 207, 207, 207, 208, 210], [115, 142, 145, 148, 151, 153, 154, 156, 155, 152, 148],
#       [3090, 3091, 3095, 3103, 3111, 3119, 3127, 3135, 3191, 3200, 3208]],
#      [[226, 233, 232, 230, 228, 223], [107, 174, 175, 175, 175, 175], [3467, 3467, 3479, 3480, 3488, 3503]]]
# ))



